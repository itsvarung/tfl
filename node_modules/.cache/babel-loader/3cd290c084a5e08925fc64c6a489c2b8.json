{"ast":null,"code":"var _jsxFileName = \"/Users/varungupta/tfl/src/App.tsx\";\nimport React, { Component } from \"react\";\nimport TrainLinesTable from \"./components/table\";\nimport { fetchLineData } from \"./services/fetchLineData\";\nexport const FunctionBasedComponent = () => {\n  const [lineData, setLineData] = React.useState([]);\n\n  async function getLineData() {\n    try {\n      const lineData = await fetchLineData();\n\n      if (lineData !== undefined) {\n        setLineData(lineData);\n      } else {\n        setLineData([]);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(TrainLinesTable, {\n    lineData: lineData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lines: []\n    };\n  }\n\n  async setLineData() {\n    try {\n      const lineData = await fetchLineData();\n\n      if (lineData !== undefined) {\n        this.setState({\n          lines: lineData\n        });\n      } else {\n        this.setState({\n          lines: []\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async componentDidMount() {\n    this.setLineData();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(TrainLinesTable, {\n      lineData: this.state.lines,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/varungupta/tfl/src/App.tsx"],"names":["React","Component","TrainLinesTable","fetchLineData","FunctionBasedComponent","lineData","setLineData","useState","getLineData","undefined","e","console","error","App","constructor","props","state","lines","setState","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AAEA,OAAO,MAAMC,sBAAsB,GAAG,MAAM;AAC1C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,KAAK,CAACO,QAAN,CAAuB,EAAvB,CAAhC;;AAEA,iBAAeC,WAAf,GAA6B;AAC3B,QAAI;AACF,YAAMH,QAAQ,GAAG,MAAMF,aAAa,EAApC;;AACA,UAAIE,QAAQ,KAAKI,SAAjB,EAA4B;AAC1BH,QAAAA,WAAW,CAACD,QAAD,CAAX;AACD,OAFD,MAEO;AACLC,QAAAA,WAAW,CAAC,EAAD,CAAX;AACD;AACF,KAPD,CAOE,OAAOI,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF;;AACD,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,QAAQ,EAAEL,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CApBM;AA0BP,OAAO,MAAMQ,GAAN,SAAkBZ,SAAlB,CAA4C;AACjDa,EAAAA,WAAW,CAACC,KAAD,EAAoB;AAC7B,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAED,QAAMX,WAAN,GAAoB;AAClB,QAAI;AACF,YAAMD,QAAQ,GAAG,MAAMF,aAAa,EAApC;;AACA,UAAIE,QAAQ,KAAKI,SAAjB,EAA4B;AAC1B,aAAKS,QAAL,CAAc;AACZD,UAAAA,KAAK,EAAEZ;AADK,SAAd;AAGD,OAJD,MAIO;AACL,aAAKa,QAAL,CAAc;AACZD,UAAAA,KAAK,EAAE;AADK,SAAd;AAGD;AACF,KAXD,CAWE,OAAOP,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF;;AAED,QAAMS,iBAAN,GAA0B;AACxB,SAAKb,WAAL;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,eAAD;AAAiB,MAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAnCgD;AAsCnD,eAAeJ,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport TrainLinesTable from \"./components/table\";\nimport { fetchLineData } from \"./services/fetchLineData\";\n\nexport const FunctionBasedComponent = () => {\n  const [lineData, setLineData] = React.useState<Line[]>([]);\n\n  async function getLineData() {\n    try {\n      const lineData = await fetchLineData();\n      if (lineData !== undefined) {\n        setLineData(lineData);\n      } else {\n        setLineData([]);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  return (\n    <div className=\"App\">\n      <TrainLinesTable lineData={lineData} />\n    </div>\n  );\n};\n\ntype trainLines = {\n  lines: Line[];\n};\n\nexport class App extends Component<{}, trainLines> {\n  constructor(props: trainLines) {\n    super(props);\n    this.state = {\n      lines: []\n    };\n  }\n\n  async setLineData() {\n    try {\n      const lineData = await fetchLineData();\n      if (lineData !== undefined) {\n        this.setState({\n          lines: lineData\n        });\n      } else {\n        this.setState({\n          lines: []\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async componentDidMount() {\n    this.setLineData();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TrainLinesTable lineData={this.state.lines} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\ninterface Line {\n  $type: String;\n  id: String;\n  name: String;\n  modeName: String;\n  disruptions: String[];\n  created: String;\n  modified: String;\n  lineStatuses: LineStatus[];\n  routeSections: String[];\n  serviceTypes: ServiceType[];\n  crowding: Crowding;\n}\n\ninterface LineStatus {\n  $type: String;\n  id: number;\n  statusSeverity: number;\n  statusSeverityDescription: String;\n  reason: String;\n  created: String;\n  validityPeriods: ValidityPeriod[];\n  disruption: Disruption;\n}\n\ninterface Disruption {\n  $type: String;\n  category: String;\n  categoryDescription: String;\n  description: String;\n  affectedRoutes: String[];\n  affectedStops: String[];\n  closureText: String;\n}\n\ninterface ValidityPeriod {\n  $type: String;\n  fromDate: String;\n  toDate: String;\n  isNow: Boolean;\n}\n\ninterface ServiceType {\n  $type: String;\n  name: String;\n  uri: String;\n}\n\ninterface Crowding {\n  $type: String;\n}\n"]},"metadata":{},"sourceType":"module"}